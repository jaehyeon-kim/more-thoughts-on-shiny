One benefit of Vue is major libraries for frontend development are developed and maintained by its core dev team. 

They are 

-- Vue itself - https://vuejs.org/
-- Vuex for state management - https://vuex.vuejs.org/en/intro.html
-- Vue Router for routing - https://router.vuejs.org/en/

This improves consistency in development. (On the other hand, there are ever-increasing posts that compare whether Redux or Mobx is better for state management with React.)

Also those libraries are well-documented so that less experienced developers (like me) can easily learn relevant knowledge, recommended practices and how to test.

In relation to application layout and UI components, I tried Vuetify. Although it provides a competitive set of components, its documentation is rather limited. For example, I haven't found a section in relation to changing fonts/spacing of some components.

Googling helped to find another framework called Quasar and I find it has excellent documentation not only for its UI components but also for frontend development in general. Although it'd take some time to learn it, I consider it's worth the effort.

-- Quasar for application layout and UI components - http://quasar-framework.org/

Besides there are a couple of good libraries. Axios for HTTP request, which helps handle asynchronous HTTP requests easily rather than falling into 'callback hell'. Also Vuelidate for input validation, which helps follow one of the good practices that says 'Never trust user inputs'.

-- Axios for HTTP request - https://github.com/axios/axios
-- Vuelidate for input validation - https://monterail.github.io/vuelidate/

Finally 

-- AWS Amplify for using AWS services - https://aws.github.io/aws-amplify/
-- AWS Amplify Vue Starter - https://github.com/aws-samples/aws-amplify-vue

==================

Shiny with htmlwidgets is a great combination for web development.

- Shiny manages application state effectively so that it is hardly expected that frontend and backend keep mismatching values - most of such work is done by `reactive*()` and `observe*()`.
- htmlwidgets help create interactive html elements in R

While htmlwidgets can be rendered without a problem by HTTP requests, the remaining issue is `how to manage application state effectively`.

Although JQuery is popular for such tasks, it has 2 limitations.

1. manipulating actual DOM is slow
2. harder to manage application state (eg `callback hell`)

I'm not against using JQuery (and we are likely to use it) but the point is JQuery may not be the right tool for application state management.

JS frameworks would be used to handle such an issue and the following frameworks are popular.

- angular: MVC (model-view-controller), version imcompatible (v2 is quite different from v4), may not be suitable
- react: V only, popular and rich ecosystem, need good understanding to implement state management/routing/higher order components 
- vue: V only, getting more popular and competitive ecosystem, easier than react to learn and simpler to get jobs done

At the moment, I'm looking into `vue`.

In relation to admin template or UI components, it may not be a good idea to use something that relies on Bootstrap because most of those also relies on its own version of JQuery in one way of another - if their JQuery is different from ours, there'll be `version conflict`.

There are some UI frameworks that don't rely on Bootstrap/JQuery such as Material UI are Semantic UI and the former has several active projects and may be of good fit.

- https://vuematerial.io/
- https://vuetifyjs.com/en/

===================

One benefit of Vue is major libraries for frontend development are developed and maintained by its core dev team.

They are

-- Vue itself - https://vuejs.org/
-- Vuex for state management - https://vuex.vuejs.org/en/intro.html
-- Vue Router for routing - https://router.vuejs.org/en/

This improves consistency in development. (On the other hand, there are ever-increasing posts that compare whether Redux or Mobx is better for state management with React.)

Also those libraries are well-documented so that less experienced developers (like me) can easily learn relevant knowledge, recommended practices and how to test.

In relation to application layout and UI components, I tried Vuetify. Although it provides a competitive set of components, its documentation is rather limited. For example, I haven't found a section in relation to changing fonts/spacing of some components.

Googling helped to find another framework called Quasar and I find it has excellent documentation not only for its UI components but also for frontend development in general. Although it'd take some time to learn it, I consider it's worth the effort.

-- Quasar for application layout and UI components - http://quasar-framework.org/

Besides there are a couple of good libraries. Axios for HTTP request, which helps handle asynchronous HTTP requests easily rather than falling into 'callback hell'. Also Vuelidate for input validation, which helps follow one of the good practices that says 'Never trust user inputs'.

-- Axios for HTTP request - https://github.com/axios/axios
-- Vuelidate for input validation - https://monterail.github.io/vuelidate/

Finally

-- AWS Amplify for using AWS services - https://aws.github.io/aws-amplify/
-- AWS Amplify Vue Starter - https://github.com/aws-samples/aws-amplify-vue